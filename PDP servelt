package com.bta.core.servlets;

import com.bta.core.pojo.pdp.PDPContainer;
import com.bta.core.services.PDPService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.NonNull;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

@Component(service = Servlet.class, property = {Constants.SERVICE_DESCRIPTION + "=PDP Servlet", ServletResolverConstants.SLING_SERVLET_METHODS + "=GET", ServletResolverConstants.SLING_SERVLET_RESOURCE_TYPES + "=brownthomasarnotts/components/pdpcontainer", ServletResolverConstants.SLING_SERVLET_EXTENSIONS + "=json"})
public class PDPServlet extends SlingAllMethodsServlet {

    protected static final Logger LOGGER = LoggerFactory.getLogger(PDPServlet.class);

    @Reference
    private transient PDPService pdpService;

    @Override
    protected void doGet(@NonNull SlingHttpServletRequest request, @NonNull SlingHttpServletResponse response) throws ServletException, JsonProcessingException, UnsupportedEncodingException {

        final String pagePath = (request.getParameter("pagePath") != null) ? request.getParameter("pagePath") : null;
        String siteLocale = pdpService.getSiteAndLocale(request, null);
        if (null != pagePath) {
            final PDPContainer apiResponse = pdpService.getPDPJson(pagePath, siteLocale, request);
            if (null != apiResponse) {
                response.setContentType("application/json");
                response.setCharacterEncoding("UTF-8");
                try {
                    response.getWriter().println(new ObjectMapper().writeValueAsString(apiResponse));
                } catch (IOException e) {
                    LOGGER.error("Error occured while processing the response :: {} {}", e.getMessage(), e.getCause());
                }
            }
        }
    }
}
